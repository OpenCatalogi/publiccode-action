name: 'Create or Update publiccode.yaml'
author: 'Open Catalogi'
description: 'Creates or updates the publiccode.yaml or publicorganisation.yml file with repository metadata'

branding:
  icon: 'file-plus'
  color: 'blue'

inputs:
  repository:
    description: 'Git url of the remote repository you want to check'
    required: false
    type: string
    default: ''
  path:
    description: 'publiccode.yaml path'
    required: false
    type: string
    default: 'publiccode.yaml'
  opencatalogi:
    description: 'publiccode.yaml path'
    required: false
    type: boolean
    default: false
  gitname:
    description: 'Git name configuration for bump commit'
    required: false
    type: string
    default: 'Open Catalogi bot'
  gitmail:
    description: 'Git mail configuration for bump commit'
    required: false
    type: string
    default: 'bot@opencatalogi.nl'

outputs:
  version:
    description: 'New version of softwareVersion field in publiccode.yml'
  releaseDate:
    description: 'New release date of releaseDate field in publiccode.yml'

runs:
  using: "composite"
  steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v2
    # Install Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'      
    # Fetch repositories of the github organization
    - name: Get Repositories for github organization
      uses: raven-actions/get-repos@v1.0.2
      if: (contains(github.repository, '.github'))
      id: get-repos
    # Transfer the repossitory data to the container
    - name: Transfer the repossitory data to the container
      shell: bash
      run: |
        echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        echo "REPO_DESC=${{ github.event.repository.description }}" >> $GITHUB_ENV
        echo "REPO_URL=${{ github.event.repository.html_url }}" >> $GITHUB_ENV
        echo "REPO_HOMEPAGE=${{ github.event.repository.homepage }}" >> $GITHUB_ENV
        echo "REPO_LICENSE=${{ github.event.repository.license.key }}" >> $GITHUB_ENV
        echo "REPO_CREATED_AT=${{ github.event.repository.created_at }}" >> $GITHUB_ENV

        echo "ORGANISATION_NAME=${{ github.event.organization.login }}" >> $GITHUB_ENV
        echo "ORGANISATION_DESCRIPTION=${{ github.event.organization.description }}" >> $GITHUB_ENV
        echo "ORGANISATION_GITID=${{ github.event.organization.id}}" >> $GITHUB_ENV
        echo "ORGANISATION_URL=${{ github.event.organization.login }}" >> $GITHUB_ENV
        echo "ORGANISATION_AVATAR=${{ github.event.organization.avatar_url }}" >> $GITHUB_ENV
        
        echo 'ORGANIZATION_REPOS=${{ steps.get-repos.outputs.repos }}' >> $GITHUB_ENV

        echo "Installing PyYAML..."
        pip install PyYAML
      # Create changes  if it is a normal repository
    - name: Create or update the publiccode file
      if: (!contains(github.repository, '.github'))
      shell: bash
      run: |        
        python - <<END
        import os
        import yaml
        from datetime import datetime
      
        def set_default(d, key, default_value):
          if not isinstance(d, dict):
            return
          if key not in d:
            d[key] = default_value
        
        # Read existing publiccode.yaml
        try:
          with open("publiccode.yaml", "r") as f:
            data = yaml.safe_load(f)
        except FileNotFoundError:
          data = {}
        
        # Convert created_at to date format
        created_at_date = datetime.now().strftime('%Y-%m-%d')
          
        # Initialize missing keys with default values
        set_default(data, 'publiccodeYmlVersion', "0.2")
        set_default(data, 'name', "")
        set_default(data, 'url', "")
        set_default(data, 'landingURL', "")
        set_default(data, 'softwareVersion', "")
        set_default(data, 'releaseDate', created_at_date)
        set_default(data, 'platforms', ["web"])
        set_default(data, 'categories', ["it-development"])
        set_default(data, 'usedBy', [])
        set_default(data, 'roadmap', "")
        set_default(data, 'developmentStatus', "development")
        set_default(data, 'softwareType', "standalone/web")
        set_default(data, 'description', {'en': {}})
        set_default(data['description']['en'], 'localisedName', "")
        set_default(data['description']['en'], 'genericName', "")
        set_default(data['description']['en'], 'shortDescription', "")
        set_default(data['description']['en'], 'longDescription', "")
        set_default(data['description']['en'], 'documentation', "")
        set_default(data['description']['en'], 'apiDocumentation', "")
        set_default(data['description']['en'], 'features', [])
        set_default(data['description']['en'], 'screenshots', [])
        set_default(data['description']['en'], 'videos', [])
        set_default(data['description']['en'], 'awards', [])
        set_default(data, 'nl', {'vng': {}})
        set_default(data['nl']['vng'], 'gemma', [])
        set_default(data['nl']['vng'], 'commonground', [])
        set_default(data, 'legal', {})
        set_default(data['legal'], 'license', "")
        set_default(data['legal'], 'mainCopyrightOwner', "")
        set_default(data['legal'], 'repoOwner', "")
        set_default(data['legal'], 'authorsFile', "")
        set_default(data, 'maintenance', {})
        set_default(data['maintenance'], 'type', "none")
        set_default(data['maintenance'], 'contractors', [])
        set_default(data['maintenance'], 'contacts', [])
        set_default(data, 'localisation', {})
        set_default(data['localisation'], 'localisationReady', False)
        set_default(data['localisation'], 'availableLanguages', ["en"])
        set_default(data, 'organisation', {})
        
        # Update or append values
        if os.environ.get('REPO_NAME'):
          data['name'] = os.environ['REPO_NAME']
        if os.environ.get('REPO_URL'):
          data['url'] = os.environ['REPO_URL']
        if os.environ.get('REPO_DESC'):
          data['description']['en']['genericName'] = os.environ['REPO_DESC']
        if os.environ.get('REPO_HOMEPAGE'):
          data['url'] = os.environ['REPO_HOMEPAGE']
        if os.environ.get('REPO_LICENSE'):
          data['legal']['license'] = os.environ['REPO_LICENSE']
        if os.environ.get('ORGANISATION_NAME'):
          data['organisation']['name'] = os.environ['ORGANISATION_NAME']
        if os.environ.get('ORGANISATION_AVATAR'):
          data['organisation']['logo'] = os.environ['ORGANISATION_AVATAR']
        if os.environ.get('ORGANISATION_URL'):
          data['organisation']['url'] = os.environ['ORGANISATION_URL']
        if os.environ.get('ORGANISATION_DESCRIPTION'):
          data['organisation']['description'] = os.environ['ORGANISATION_DESCRIPTION']
        
        # Write updated publiccode.yaml
        with open("publiccode.yaml", "w") as f:
            yaml.safe_dump(data, f)
        END
      # Create changes  if it is an organisation repository
    - name: Create or update the publicorganisation file
      if: (contains(github.repository, '.github'))
      shell: bash
      run: |
        python - <<END
        import os
        import yaml
        import json
        import copy
        from datetime import datetime
        
        def set_default(d, key, default_value):
          if not isinstance(d, dict):
            return
          if key not in d:
            d[key] = default_value

        repositories = json.loads(os.environ.get('ORGANIZATION_REPOS'))
        repositoryUrls = [repository['html_url'] for repository in repositories]

        support = []

        for repository in repositoryUrls:
          support.append({"software": repository, "type": "community"})
        
        # Read existing opencatalogi.yaml
        try:
          with open("opencatalogi.yaml", "r") as f:
            data = yaml.safe_load(f)
        except FileNotFoundError:
          data = {}
        
        # Convert created_at to date format        
        created_at_date = datetime.now().strftime('%Y-%m-%d')
        
        # Initialize missing keys with default values
        set_default(data, 'publiccodeYmlVersion', "0.2")
        set_default(data, 'name', "")
        set_default(data, 'website', "")
        set_default(data, 'contact', {})
        set_default(data['contact'], 'email', "")
        set_default(data['contact'], 'phone', "")
        set_default(data, 'softwareOwned', copy.copy(repositoryUrls))
        set_default(data, 'softwareUsed', copy.copy(repositoryUrls))
        set_default(data, 'softwareSupported', support)
        set_default(data, 'members', [])                
        
        # Write updated opencatalogi.yaml
        with open("opencatalogi.yaml", "w") as f:
            yaml.safe_dump(data, f)
        END

    # Commit changes if it is a normal repository
    - name: Commit changes
      if: (!contains(github.repository, '.github'))
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add publiccode.yaml
        git commit -m "${{ github.workflow }}" || echo "No changes to commit"
        git push
    # Commit changes if it is an organisation repository
    - name: Commit changes
      if: (contains(github.repository, '.github'))
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add opencatalogi.yaml
        git commit -m "${{ github.workflow }}" || echo "No changes to commit"
        git push
    # Post Repository URL to OpenCatalogi API
    - name: Post Repository URL to OpenCatalogi API
      shell: bash
      run: |
        curl -X POST "https://api.opencatalogi.nl/api/github_events" \
        -H "Content-Type: application/json" \
        -d '{
          "repository": {
            "html_url": "'${{ github.event.repository.html_url }}'"
          }
        }'

